{"version":3,"sources":["src/core/router.ts","src/config.ts","src/core/api.ts","src/core/view.ts","src/page/meal-detail-view.ts","src/page/meal-feed-view.ts","src/page/index.ts","src/store.ts","src/app.ts"],"names":[],"mappings":"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","file":"app.bd6072f6.js","sourceRoot":"..","sourcesContent":["import { RouteInfo } from \"../types\";\nimport View from \"./view\";\n\nexport default class Router {\n  routeTable: RouteInfo[];\n  defaultRoute: RouteInfo | null;\n  constructor() {\n    window.addEventListener(\"hashchange\", this.route.bind(this));\n    this.routeTable = [];\n    this.defaultRoute = null;\n  }\n  setDefaultPage(page: View): void {\n    this.defaultRoute = { path: \"\", page };\n  }\n\n  addRouterPath(path: string, page: View): void {\n    this.routeTable.push({ path, page });\n  }\n\n  route() {\n    const routePath = location.hash;\n\n    if (routePath === \"\" && this.defaultRoute) {\n      this.defaultRoute.page.render();\n    }\n    for (const routeInfo of this.routeTable) {\n      if (routePath.indexOf(routeInfo.path) >= 0) {\n        routeInfo.page.render();\n        break;\n      }\n    }\n  }\n}\n","export const SEARCH_URL =\n  \"https://www.themealdb.com/api/json/v1/1/search.php?s=b\";\nexport const CONTENT_URL =\n  \"https://www.themealdb.com/api/json/v1/1/lookup.php?i=@id\";\n","import { MealList } from \"../types\";\n\nexport class Api {\n  xhr: XMLHttpRequest;\n  url: string;\n  constructor(url: string) {\n    this.xhr = new XMLHttpRequest();\n    this.url = url;\n  }\n\n  // Promise,fetch(xhr의 보완재로 나온 api)\n  protected async request<AjaxResponse>(): Promise<AjaxResponse> {\n    const response = await fetch(this.url);\n    return (await response.json()) as AjaxResponse;\n  }\n}\n\nexport class MealFeedApi extends Api {\n  constructor(url: string) {\n    super(url);\n  }\n  getData(): Promise<MealList> {\n    return this.request<MealList>();\n  }\n}\nexport class MealDetailApi extends Api {\n  constructor(url: string) {\n    super(url);\n  }\n  getData(): Promise<MealList> {\n    return this.request<MealList>();\n  }\n}\n","export default abstract class View {\n  private template: string;\n  private renderTemplate: string;\n  private container: HTMLElement;\n  private htmlList: string[];\n\n  constructor(containerId: string, template: string) {\n    const containerElement = document.getElementById(containerId);\n    if (!containerElement) {\n      throw \"최상위 컨테이너가 없어 UI를 진행하지 못합니다\";\n    }\n    this.container = containerElement;\n    this.template = template;\n    this.renderTemplate = template;\n    this.htmlList = [];\n  }\n  protected updateView(): void {\n    // template 갱신\n    this.container.innerHTML = this.renderTemplate;\n    this.renderTemplate = this.template;\n  }\n  protected setTemplateData(key: string, value: string): void {\n    // template의 마킹된 데이터 갱신\n    this.renderTemplate = this.renderTemplate.replace(`{{__${key}__}}`, value);\n  }\n\n  protected addHtml(htmlString: string): void {\n    // 템플릿을 제외하고 따로 넣을 htmlList 데이터 추가\n    this.htmlList.push(htmlString);\n  }\n  protected getHtml(): string {\n    // htmlList 문자열로 변환하여 데이터를 가져옴\n    const snapshot = this.htmlList.join(\"\");\n    this.clearHtmlList();\n    return snapshot;\n  }\n  protected clearHtmlList(): void {\n    // 초기화\n    this.htmlList = [];\n  }\n  abstract render(): void; // 자식클래스들에게 이 메소드를 구현하라는 의미\n}\n","import { CONTENT_URL } from \"../config\";\nimport { MealDetailApi } from \"../core/api\";\nimport View from \"../core/view\";\nimport { MealDetail, MealList, MealStore } from \"../types\";\n\nlet template = `\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1 class=\"title\">{{__strMeal__}}</h1>\n      <div class=\"page-nav\">\n        <a href=\"#/page/{{__currentPage__}}\">Home</a>\n      </div>\n    </div>\n    <div class=\"meal-content\">\n      <img src=\"{{__strMealThumb__}}\" />\n      <div class=\"meal-info\">\n        <h1 class=\"name\">{{__strMeal__}}</h1>\n        <div class=\"materials\">\n          <h2>materials</h2>  \n          <ul>\n            {{__meal_ingredient__}}\n          </ul>\n        </div>\n        <div class=\"etc\">\n          <div class=\"etc-column\">\n            <span>Category</span>\n            <span>{{__strCategory__}}</span>\n          </div>\n          <div class=\"etc-column\">\n            <span>Area</span>\n            <span>{{__strArea__}}</span>\n          </div>\n          <div class=\"etc-column\">\n            <span>Link</span>\n            <span><a href=\"{{__strYoutube__}}\"><i class=\"fa-brands fa-youtube\"></i>YouTube</a></span>\n          </div>\n          <div class=\"etc-column\">\n            <span>Source</span>\n            <span><a href=\"{{__strSource__}}\"><i class=\"fa-sharp fa-solid fa-bookmark\"></i>Source</a></span>\n          </div>\n        </div>\n        <div class=\"intruction\">{{__strInstructions__}}</div>\n      </div>\n    </div>\n  </div>\n  `;\nexport default class MealDetailView extends View {\n  private store: MealStore;\n  constructor(containerId: string, store: MealStore) {\n    super(containerId, template);\n    this.store = store;\n  }\n  async render(): Promise<void> {\n    const id = location.hash.substring(7);\n    const api = new MealDetailApi(CONTENT_URL.replace(\"@id\", id));\n    const data = await api.getData();\n    const {\n      strMeal,\n      strCategory,\n      strArea,\n      strYoutube,\n      strSource,\n      strInstructions,\n      strMealThumb,\n    }: MealDetail = data.meals[0];\n\n    this.setTemplateData(\n      \"meal_ingredient\",\n      this.makeingredients(data.meals[0])\n    );\n    this.setTemplateData(\"currentPage\", String(this.store.currentPage));\n    this.setTemplateData(\"strMeal\", strMeal);\n    this.setTemplateData(\"strMealThumb\", strMealThumb);\n    this.setTemplateData(\"strMeal\", strMeal);\n    this.setTemplateData(\"strCategory\", strCategory);\n    this.setTemplateData(\"strArea\", strArea);\n    this.setTemplateData(\"strYoutube\", strYoutube);\n    this.setTemplateData(\"strSource\", strSource);\n    this.setTemplateData(\"strInstructions\", strInstructions);\n\n    this.updateView();\n  }\n\n  private makeingredients(meal: MealDetail): string {\n    let i = 1;\n\n    while (meal[`strMeasure${i}`] != \" \") {\n      this.addHtml(` \n      <li>\n        <div>\n          ${meal[`strIngredient${i}`]}\n        </div>\n        <div>\n          ${meal[`strMeasure${i}`]}\n        </div>\n      </li>\n      `);\n      i++;\n    }\n    return this.getHtml();\n  }\n}\n","import { SEARCH_URL } from \"../config\";\nimport { MealFeedApi } from \"../core/api\";\nimport View from \"../core/view\";\nimport { MealDetail, MealList, MealStore } from \"../types\";\n\nconst template = `\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1 class=\"title\"><a href=\"#\">MealDB</a></h1>\n      <div class=\"page-nav\">\n        <a href=\"#/page/{{__prev_page__}}\">prev page</a>\n        <a href=\"#/page/{{__next_page__}}\">next page</a>\n      </div>\n    </div>\n    <div class=\"meal-list\">\n      {{__meal_feed__}}\n    </div>\n  </div>\n`;\nexport default class MealFeedView extends View {\n  private api: MealFeedApi;\n  private store: MealStore;\n\n  constructor(containerId: string, store: MealStore) {\n    super(containerId, template);\n\n    this.api = new MealFeedApi(SEARCH_URL);\n    this.store = store;\n  }\n  async render(): Promise<void> {\n    this.store.currentPage = +location.hash.substring(7) || 1;\n\n    if (!this.store.hasData) {\n      this.store.setData(await this.api.getData());\n    }\n\n    const curPage = this.store.currentPage;\n    for (let i = (curPage - 1) * 10; i < curPage * 10; i++) {\n      const {\n        idMeal,\n        strMeal,\n        strYoutube,\n        strSource,\n        strMealThumb,\n        strCategory,\n      }: MealDetail = this.store.getData(i);\n      this.addHtml(`\n        <div class=\"meal-content-preview\">\n          <div class=\"meal-info-preview\">\n            <img src=\"${strMealThumb}\"/>\n            <div class=\"title\">\n              <h3>${strCategory}</h3>\n              <a href=\"#/show/${idMeal}\">${strMeal}</a>\n            </div>\n            <div class=\"link\">\n              <a href=\"${strYoutube}\"><i class=\"fa-brands fa-youtube\"></i>YouTube</a>\n              <a href=\"${strSource}\"><i class=\"fa-sharp fa-solid fa-bookmark\"></i>Source</a>\n            </div>\n          </div>\n        </div>\n      `);\n    }\n    this.setTemplateData(\"meal_feed\", this.getHtml());\n    this.setTemplateData(\"prev_page\", String(this.store.prevPage));\n    this.setTemplateData(\"next_page\", String(this.store.getNextPage()));\n\n    this.updateView();\n  }\n}\n","export { default as MealDetailView } from \"./meal-detail-view\";\nexport { default as MealFeedView } from \"./meal-feed-view\";\n","import { MealDetail, MealList, MealStore } from \"./types\";\n\nexport default class Store implements MealStore {\n  private _currentPage: number;\n  private _data: MealDetail[];\n  constructor() {\n    this._data = [];\n    this._currentPage = 1;\n  }\n  get currentPage() {\n    return this._currentPage;\n  }\n  set currentPage(curPage: number) {\n    this._currentPage = curPage;\n  }\n  get prevPage(): number {\n    return this._currentPage > 1 ? this._currentPage - 1 : 1;\n  }\n  get hasData(): boolean {\n    return this._data.length > 0;\n  }\n  getData(position: number): MealDetail {\n    return this._data[position];\n  }\n  setData(data: MealList) {\n    this._data = data.meals;\n  }\n\n  getNextPage(): number {\n    if (this.hasData) {\n      return this._currentPage >= Math.floor(this._data.length / 10)\n        ? this._currentPage\n        : this._currentPage + 1;\n    } else {\n      return 0;\n    }\n  }\n}\n","import Router from \"./core/router\";\nimport { MealDetailView, MealFeedView } from \"./page\";\nimport Store from \"./store\";\n\nconst store: Store = new Store();\nconst router: Router = new Router();\nconst mealFeedView = new MealFeedView(\"root\", store);\nconst mealDetailView = new MealDetailView(\"root\", store);\n\nrouter.setDefaultPage(mealFeedView);\nrouter.addRouterPath(\"/page/\", mealFeedView);\nrouter.addRouterPath(\"/show/\", mealDetailView);\n\nrouter.route();\n\n// typescript로 window에 store라는 속성 추가하는 방법\n// const store: Store = {\n//   currentPage: 1,\n// };\n// declare global {\n//   interface Window {\n//     store: Store;\n//   }\n// }\n// window.store = store;\n"]}